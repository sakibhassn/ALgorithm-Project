import java.util.Arrays;
import java.util.Scanner;

class Main {
    static class Link implements Comparable<Link> {
        int x, y, v;

        public Link(int x, int y, int v) {
            this.x = x;
            this.y = y;
            this.v = v;
        }

        @Override
        public int compareTo(Link other) {
            return Integer.compare(this.v, other.v);
        }
    }

    static int[] parent;
    static int[] rank;

    static void makeInit(int n) {
        parent = new int[n + 1];
        rank = new int[n + 1];

        for (int i = 0; i <= n; i++) {
            parent[i] = i;
            rank[i] = 1;
        }
    }

    static int findParent(int x) {
        if (parent[x] != x) {
            parent[x] = findParent(parent[x]);
        }
        return parent[x];
    }

    static void pLink(int x, int y) {
        if (rank[x] > rank[y]) {
            rank[x] += rank[y];
            parent[y] = x;
        } else {
            rank[y] += rank[x];
            parent[x] = y;
        }
    }

    static int union(int x, int y) {
        x = findParent(x);
        y = findParent(y);
        if (x != y) {
            pLink(x, y);
            return 1;
        }
        return 0;
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int a, b, c;
        int flag = 0;

        while (sc.hasNextInt()) {
            int N = sc.nextInt();
            int sum = 0;

            for (int i = 1; i < N; i++) {
                a = sc.nextInt();
                b = sc.nextInt();
                c = sc.nextInt();
                sum += c;
            }

            if (flag != 0) {
                System.out.println();
            }
            flag = 1;
            System.out.println(sum);

            import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Scanner;

public class Main {
    static String s;
    static int[][] g;
    static int n;
    static int has;
    static char[] ans;
    static boolean[] used;

    static void dfs(int idx) {
        if (idx == n) {
            has = 1;
            System.out.print(ans[0]);
            for (int i = 1; i < n; i++)
                System.out.printf(" %c", ans[i]);
            System.out.println("");
            return;
        }
        for (int i = 0; i < n; i++) {
            if (!used[i]) {
                int j;
                for (j = 0; j < idx; j++) {
                    if (g[s.charAt(i) - 'A'][ans[j] - 'A'] != 0)
                        break;
                }
                if (j == idx) {
                    ans[idx] = s.charAt(i);
                    used[i] = true;
                    dfs(idx + 1);
                    used[i] = false;
                }
            }
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();
        scanner.nextLine();
        while (t-- > 0) {
            scanner.nextLine(); // Skip empty line
            String line = scanner.nextLine();
            s = line.replaceAll("\\s+", "");
            char[] sortedChars = s.toCharArray();
            Arrays.sort(sortedChars);
            s = new String(sortedChars);

            line = scanner.nextLine();
            String[] pairs = line.split(" ");
            g = new int[26][26];
            for (String pair : pairs) {
                g[pair.charAt(0) - 'A'][pair.charAt(2) - 'A'] = 1;
            }

            n = s.length();
            has = 0;
            ans = new char[n];
            used = new boolean[n];
            dfs(0);

            if (has == 0)
                System.out.println("NO");
            if (t > 0)
                System.out.println("");
        }
    }
}
